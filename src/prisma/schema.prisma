generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                         Int                  @id @default(autoincrement())
  name                       String
  description                String
  ticker                     String               @unique
  img                        String
  address                    String
  website                    String
  bidang_usaha               String
  prospectus_url             String
  prospectus_summary_url     String
  additional_information_url String?
  e_ipo_url                  String
  low_price                  Float?
  high_price                 Float?
  final_price                Float?
  offered_shares             Float
  outstanding_shares         Float
  date_awal_start            DateTime?
  date_awal_end              DateTime?
  date_umum_start            DateTime?
  date_umum_end              DateTime?
  date_penjatahan            DateTime?
  date_distribusi            DateTime?
  date_ipo                   DateTime?
  waran_numerator            Float?
  waran_denominator          Float?
  exercise_price             Float?
  kurs_usd                   Float?
  kurs_date                  DateTime?
  subsector_id               Int?
  created_at                 DateTime             @default(now())
  updated_at                 DateTime             @updatedAt
  subsector                  Subsector?           @relation(fields: [subsector_id], references: [id])
  underwriters               CompanyUnderwriter[]
  financials                 Financial[]
  proceeds                 Proceed[]

  @@map("companies")
}

model Sector {
  id         Int         @id @default(autoincrement())
  name       String
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  subsectors Subsector[]

  @@map("sectors")
}

model Subsector {
  id         Int       @id @default(autoincrement())
  name       String
  sector_id  Int?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  companies  Company[]
  sector     Sector?   @relation(fields: [sector_id], references: [id])

  @@map("subsectors")
}

model Underwriter {
  id         Int                  @id @default(autoincrement())
  name       String
  created_at DateTime             @default(now())
  updated_at DateTime             @updatedAt
  companies  CompanyUnderwriter[]

  @@map("underwriters")
}

model CompanyUnderwriter {
  id             Int          @id @default(autoincrement())
  company_id     Int
  underwriter_id Int
  type           String
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  company        Company?     @relation(fields: [company_id], references: [id])
  underwriter    Underwriter? @relation(fields: [underwriter_id], references: [id])

  @@map("company_underwriters")
}

model Financial {
  id         Int      @id @default(autoincrement())
  interval   Float
  date_end   DateTime
  net_income Float
  liability  Float?
  asset      Float?
  is_audited Boolean  @default(true)
  company_id Int?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  company    Company? @relation(fields: [company_id], references: [id])

  @@map("financials")
}

model Proceed {
  id         Int      @id @default(autoincrement())
  use   String
  company_id Int?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  company    Company? @relation(fields: [company_id], references: [id])

  @@map("proceeds")
}